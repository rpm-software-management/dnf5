<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">

<!--
Copyright Contributors to the libdnf project.

This file is part of libdnf: https://github.com/rpm-software-management/libdnf/

Libdnf is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

Libdnf is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
-->

<node>
<!-- org.rpm.dnf.v0.Offline:
   @short_description: Interface to offline transactions
-->
<interface name="org.rpm.dnf.v0.Offline">
    <!--
        check_pending:
        @pending: boolean, true if there is a pending offline transaction

        Check whether there is an offline transaction configured for the next reboot initiated by dnf5.
    -->
    <method name="check_pending">
        <arg name="pending" type="b" direction="out" />
    </method>


    <!--
        cancel:
        @success: boolean, returns `false` if there was an error during the transaction cancellation, or if the offline transaction was initiated by another tool than dnf5. Returns `true` if the offline transaction was successfully cancelled or if no offline transaction was configured.
        @error_msg: string, contains error encountered while cancelling the transaction

        Cancel the dnf5 offline transaction configured for the next reboot. Offline updates scheduled by another tool are not cancelled.
    -->
    <method name="cancel">
        <arg name="success" type="b" direction="out" />
        <arg name="error_msg" type="s" direction="out" />
    </method>

    <!--
        clean:
        @success: boolean, returns `false` if there was an error during the transaction cleanup. Returns `true` if the offline transaction was successfully cleaned or if no offline transaction was configured.
        @error_msg: string, contains error encountered while cleaning the transaction

        Cancel the dnf5 offline transaction configured for the next reboot and remove all stored offline transaction data, including downloaded packages. Offline updates scheduled by another tool are not affected.
    -->
    <method name="clean">
        <arg name="success" type="b" direction="out" />
        <arg name="error_msg" type="s" direction="out" />
    </method>

    <!--
        set_finish_action:
        @action: string, if set to "poweroff", the system will be powered off after applying the offline transaction. Otherwise the system will reboot.
        @success: boolean, true if the action was successfully set
        @error_msg: string, contains error encountered while setting the action

        Set the action that should be performed after the offline transaction is applied. If the `action` is "poweroff", the system will be powered off, otherwise it will be rebooted (which is default).
        The call might fail in case there is no scheduled offline transaction, or the transaction was not scheduled using libdnf5.
    -->
    <method name="set_finish_action">
        <arg name="action" type="s" direction="in" />
        <arg name="success" type="b" direction="out" />
        <arg name="error_msg" type="s" direction="out" />
    </method>

</interface>

</node>
